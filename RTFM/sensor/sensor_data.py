"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class sensor_data(object):
    __slots__ = ["roomNum", "sendTime", "temperature", "O2conc", "COconc", "CO2conc", "heatFlux"]

    def __init__(self):
        self.roomNum = 0
        self.sendTime = 0.0
        self.temperature = 0.0
        self.O2conc = 0.0
        self.COconc = 0.0
        self.CO2conc = 0.0
        self.heatFlux = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(sensor_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hdddddd", self.roomNum, self.sendTime, self.temperature, self.O2conc, self.COconc, self.CO2conc, self.heatFlux))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != sensor_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return sensor_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = sensor_data()
        self.roomNum, self.sendTime, self.temperature, self.O2conc, self.COconc, self.CO2conc, self.heatFlux = struct.unpack(">hdddddd", buf.read(50))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if sensor_data in parents: return 0
        tmphash = (0x3ec9ad124b9ecbf6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if sensor_data._packed_fingerprint is None:
            sensor_data._packed_fingerprint = struct.pack(">Q", sensor_data._get_hash_recursive([]))
        return sensor_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

